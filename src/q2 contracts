
Q2.1

; Signature: append(lst1, lst2)
; Type: [ List(Any)*List(Any) -> List(Any)]
; Purpose: given 2 lists and return a concatenation of the lists
; Pre-conditions: none
; Tests: (append '(1 2) '(3 4)) => '(1 2 3 4)

Q2.2

; Signature: reverse(lst)
; Type: [ List(Any) -> List(Any)]
; Purpose: given a list of items and return a list with the items in a reversed order
; Pre-conditions: none
; Tests: (reverse '(1 2 3)) => '(3 2 1)

Q2.3

; Signature: duplicate-item(item, dup-count)
; Type: [ T1*Number -> List(T1)]
; Purpose: given an item and a non negative number and return a list with the item duplicated the times as the number given
; Pre-conditions: dup-count >= 0
; Tests: (duplicate-item 1 5) => '(1 1 1 1 1), (duplicate-item 2 3) => '(2 2 2), (duplicate-item 4 0) => '() 

; Signature: duplicate-items(lst, dup-count)
; Type: [ List(Any)*List(Number) -> List(Any)]
; Purpose: given a list of items and a list of non negative numbers and return a list with the items duplicated the times as the number given
; if the list of items size is bigger then the list of the numbers its working as a cyclic list
; Pre-conditions: (eq? dup-count '()) => #f
; Tests: (duplicate-items '(1 2 3) '(1 0)) => '(1 3), (duplicate-items '(1 2 3) '(2 1 0 10 2)) => '(1 1 2)

Q2.4

Q2.5