(define append 
  (lambda(lst1 lst2)
      (if (eq? lst1 '())
        lst2
        (cons (car lst1)(append (cdr lst1) lst2))                 
       )
  )
)

(define reverse 
  (lambda (lst)
      (if (eq? lst '())
        '()
        (append (reverse (cdr lst)) (list (car lst)))                 
       )
  )
)

(define duplicate-item
   (lambda(item dup-count)
      (if (= dup-count 0)
      '()
      (append (cons item '()) (duplicate-item item (- dup-count 1)))
      )
   )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (eq? lst '())
      lst
      (append (duplicate-item (car lst) (car dup-count)) (duplicate-items (cdr lst) (append (cdr dup-count) (cons (car dup-count) '()))))
      )
   )
)


(define payment
  (lambda (n coins-lst)
        @TODO
  )
)
                               
(define compose-n
  (lambda( f n)
    (if (= n 0) 1
    (if (= n 1) f
    (lambda (x) (f ((compose-n f (- n 1)) x)))))
  )
)